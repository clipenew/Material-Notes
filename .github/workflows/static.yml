<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Material Notes - Android 15</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200">
    <style>
        :root {
            --md-sys-color-primary: #6750A4;
            --md-sys-color-on-primary: #FFFFFF;
            --md-sys-color-primary-container: #EADDFF;
            --md-sys-color-on-primary-container: #21005D;
            --md-sys-color-secondary: #625B71;
            --md-sys-color-on-secondary: #FFFFFF;
            --md-sys-color-secondary-container: #E8DEF8;
            --md-sys-color-on-secondary-container: #1D192B;
            --md-sys-color-surface: #FEF7FF;
            --md-sys-color-on-surface: #1D1B20;
            --md-sys-color-surface-variant: #E7E0EC;
            --md-sys-color-on-surface-variant: #49454F;
            --md-sys-color-error: #B3261E;
            --md-sys-color-on-error: #FFFFFF;
            --md-sys-color-background: #FEF7FF;
            --md-elevation-level-1: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
            --md-elevation-level-2: 0px 2px 6px 2px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
            --md-ref-typeface-brand: 'Roboto', sans-serif;
            --md-ref-typeface-plain: 'Roboto', sans-serif;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: var(--md-ref-typeface-plain);
        }

        body {
            background-color: var(--md-sys-color-background);
            color: var(--md-sys-color-on-surface);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .android-status-bar {
            height: 24px;
            background-color: var(--md-sys-color-primary);
            color: var(--md-sys-color-on-primary);
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 16px;
            font-size: 14px;
            font-weight: 500;
        }

        .android-status-bar .time {
            font-weight: 500;
        }

        .android-status-bar .icons {
            display: flex;
            gap: 8px;
        }

        .android-navigation-bar {
            height: 48px;
            background-color: var(--md-sys-color-surface);
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-around;
            align-items: center;
            position: fixed;
            bottom: 0;
            width: 100%;
        }

        .nav-button {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 4px;
            color: var(--md-sys-color-on-surface-variant);
            font-size: 12px;
            cursor: pointer;
        }

        .nav-button.active {
            color: var(--md-sys-color-primary);
        }

        .nav-button .material-symbols-rounded {
            font-size: 24px;
        }

        .app-bar {
            background-color: var(--md-sys-color-primary);
            color: var(--md-sys-color-on-primary);
            padding: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--md-elevation-level-1);
        }

        .app-bar h1 {
            font-size: 22px;
            font-weight: 500;
        }

        .app-bar-actions {
            display: flex;
            gap: 16px;
        }

        .search-bar {
            background-color: var(--md-sys-color-surface-variant);
            margin: 16px;
            border-radius: 28px;
            padding: 8px 16px;
            display: flex;
            align-items: center;
            gap: 12px;
            color: var(--md-sys-color-on-surface-variant);
        }

        .search-bar input {
            flex: 1;
            border: none;
            background: transparent;
            outline: none;
            font-size: 16px;
            color: var(--md-sys-color-on-surface);
        }

        .notes-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 16px;
            padding: 16px;
            flex: 1;
            overflow-y: auto;
            padding-bottom: 60px;
        }

        .note-card {
            background-color: var(--md-sys-color-surface);
            border-radius: 12px;
            padding: 16px;
            box-shadow: var(--md-elevation-level-1);
            transition: all 0.2s ease;
            border: 1px solid var(--md-sys-color-surface-variant);
            cursor: pointer;
            display: flex;
            flex-direction: column;
        }

        .note-card:hover {
            box-shadow: var(--md-elevation-level-2);
            transform: translateY(-2px);
        }

        .note-card .title {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 8px;
            color: var(--md-sys-color-on-surface);
        }

        .note-card .content {
            font-size: 14px;
            color: var(--md-sys-color-on-surface-variant);
            margin-bottom: 16px;
            overflow: hidden;
            position: relative;
        }

        .note-card .content.collapsed {
            max-height: 60px;
        }

        .note-card .content.expanded {
            max-height: none;
        }

        .note-card .content.collapsed::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 20px;
            background: linear-gradient(to bottom, rgba(255,255,255,0) 0%, var(--md-sys-color-surface) 100%);
        }

        .expand-toggle {
            color: var(--md-sys-color-primary);
            font-size: 14px;
            font-weight: 500;
            margin-top: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .note-card .date {
            font-size: 12px;
            color: var(--md-sys-color-on-surface-variant);
            display: flex;
            align-items: center;
            gap: 4px;
            margin-top: auto;
        }

        .fab {
            position: fixed;
            bottom: 64px;
            right: 16px;
            width: 56px;
            height: 56px;
            border-radius: 16px;
            background-color: var(--md-sys-color-primary);
            color: var(--md-sys-color-on-primary);
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: var(--md-elevation-level-2);
            cursor: pointer;
            transition: all 0.2s ease;
            z-index: 100;
        }

        .fab:hover {
            transform: scale(1.1);
        }

        .fab .material-symbols-rounded {
            font-size: 24px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: var(--md-sys-color-surface);
            border-radius: 28px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            padding: 24px;
            box-shadow: var(--md-elevation-level-2);
            display: flex;
            flex-direction: column;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 500;
        }

        .close-btn {
            background: none;
            border: none;
            color: var(--md-sys-color-on-surface);
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--md-sys-color-on-surface-variant);
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--md-sys-color-surface-variant);
            border-radius: 12px;
            font-size: 16px;
            background-color: var(--md-sys-color-surface);
            color: var(--md-sys-color-on-surface);
        }

        .form-group textarea {
            min-height: 120px;
            resize: vertical;
        }

        .tag-input-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 8px;
        }

        .tag {
            display: inline-flex;
            align-items: center;
            background-color: var(--md-sys-color-primary-container);
            color: var(--md-sys-color-on-primary-container);
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 14px;
            gap: 6px;
        }

        .tag-remove {
            background: none;
            border: none;
            color: inherit;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            width: 18px;
            height: 18px;
        }

        .tag-remove:hover {
            background-color: rgba(0, 0, 0, 0.1);
        }

        .tag-input {
            flex: 1;
            min-width: 80px;
            border: 1px dashed var(--md-sys-color-outline);
            border-radius: 16px;
            padding: 6px 12px;
            font-size: 14px;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 16px;
            margin-top: 24px;
        }

        .cancel-btn {
            background-color: transparent;
            color: var(--md-sys-color-primary);
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            font-weight: 500;
            cursor: pointer;
        }

        .save-btn {
            background-color: var(--md-sys-color-primary);
            color: var(--md-sys-color-on-primary);
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .save-btn:disabled {
            background-color: var(--md-sys-color-surface-variant);
            color: var(--md-sys-color-on-surface-variant);
            cursor: not-allowed;
        }

        .save-btn:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: var(--md-sys-color-on-surface-variant);
            grid-column: 1 / -1;
        }

        .empty-state .material-symbols-rounded {
            font-size: 48px;
            margin-bottom: 16px;
        }

        .note-actions {
            display: flex;
            justify-content: flex-end;
            gap: 8px;
            margin-top: 16px;
        }

        .note-action-btn {
            background: none;
            border: none;
            color: var(--md-sys-color-on-surface-variant);
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .note-action-btn:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .word-count {
            font-size: 12px;
            color: var(--md-sys-color-on-surface-variant);
            text-align: right;
            margin-top: 8px;
        }

        .chip {
            display: inline-flex;
            align-items: center;
            background-color: var(--md-sys-color-surface-variant);
            color: var(--md-sys-color-on-surface-variant);
            padding: 6px 12px;
            border-radius: 8px;
            font-size: 14px;
            margin-right: 8px;
            margin-bottom: 8px;
        }

        .note-tags {
            display: flex;
            flex-wrap: wrap;
            margin-top: 12px;
        }

        @media (max-width: 600px) {
            .notes-container {
                grid-template-columns: 1fr;
            }
            
            .app-bar h1 {
                font-size: 20px;
            }
        }

        /* Android 15 specific styles */
        .material-symbols-rounded {
            font-variation-settings:
            'FILL' 0,
            'wght' 400,
            'GRAD' 0,
            'opsz' 24
        }

        .toast {
            position: fixed;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 12px 24px;
            border-radius: 24px;
            font-size: 14px;
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 8px;
            animation: fadeInOut 3s forwards;
        }

        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, 20px); }
            10% { opacity: 1; transform: translate(-50%, 0); }
            90% { opacity: 1; transform: translate(-50%, 0); }
            100% { opacity: 0; transform: translate(-50%, 20px); }
        }
    </style>
</head>
<body>
    <div class="android-status-bar">
        <div class="time">12:30</div>
        <div class="icons">
            <span class="material-symbols-rounded" style="font-size: 16px;">network_wifi</span>
            <span class="material-symbols-rounded" style="font-size: 16px;">signal_cellular_4_bar</span>
            <span class="material-symbols-rounded" style="font-size: 16px;">battery_full</span>
        </div>
    </div>

    <div class="app-bar">
        <h1>Material Notes</h1>
        <div class="app-bar-actions">
            <span class="material-symbols-rounded">search</span>
            <span class="material-symbols-rounded">more_vert</span>
        </div>
    </div>

    <div class="search-bar">
        <span class="material-symbols-rounded">search</span>
        <input type="text" placeholder="Search notes...">
    </div>

    <div class="notes-container" id="notesContainer">
        <!-- Notes will be dynamically added here -->
    </div>

    <div class="fab" id="addNoteBtn">
        <span class="material-symbols-rounded">add</span>
    </div>

    <div class="android-navigation-bar">
        <div class="nav-button active">
            <span class="material-symbols-rounded">notes</span>
            <span>Notes</span>
        </div>
        <div class="nav-button">
            <span class="material-symbols-rounded">notifications</span>
            <span>Reminders</span>
        </div>
        <div class="nav-button">
            <span class="material-symbols-rounded">archive</span>
            <span>Archive</span>
        </div>
        <div class="nav-button">
            <span class="material-symbols-rounded">delete</span>
            <span>Trash</span>
        </div>
    </div>

    <div class="modal" id="noteModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">New Note</h2>
                <button class="close-btn" id="closeModal">
                    <span class="material-symbols-rounded">close</span>
                </button>
            </div>
            <form id="noteForm">
                <div class="form-group">
                    <label for="noteTitle">Title</label>
                    <input type="text" id="noteTitle" placeholder="Note title" required>
                </div>
                <div class="form-group">
                    <label for="noteContent">Content</label>
                    <textarea id="noteContent" placeholder="Write your note here..." required></textarea>
                    <div class="word-count" id="wordCount">0 words</div>
                </div>
                <div class="form-group">
                    <label>Tags</label>
                    <div class="tag-input-container" id="tagContainer">
                        <!-- Tags will be added here dynamically -->
                        <input type="text" class="tag-input" id="tagInput" placeholder="Type a tag and press comma">
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="cancel-btn" id="cancelBtn">Cancel</button>
                    <button type="submit" class="save-btn" id="saveBtn">Save</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const notesContainer = document.getElementById('notesContainer');
            const addNoteBtn = document.getElementById('addNoteBtn');
            const noteModal = document.getElementById('noteModal');
            const closeModalBtn = document.getElementById('closeModal');
            const cancelBtn = document.getElementById('cancelBtn');
            const noteForm = document.getElementById('noteForm');
            const modalTitle = document.getElementById('modalTitle');
            const noteTitle = document.getElementById('noteTitle');
            const noteContent = document.getElementById('noteContent');
            const wordCount = document.getElementById('wordCount');
            const tagInput = document.getElementById('tagInput');
            const tagContainer = document.getElementById('tagContainer');
            const saveBtn = document.getElementById('saveBtn');
            
            // State
            let notes = JSON.parse(localStorage.getItem('androidNotes')) || [];
            let currentNoteId = null;
            let tags = [];
            
            // Initialize the app
            function init() {
                renderNotes();
                updateTime();
                
                // Event listeners
                addNoteBtn.addEventListener('click', () => openModal());
                closeModalBtn.addEventListener('click', () => closeModal());
                cancelBtn.addEventListener('click', () => closeModal());
                noteForm.addEventListener('submit', saveNote);
                noteContent.addEventListener('input', updateWordCount);
                noteTitle.addEventListener('input', validateForm);
                noteContent.addEventListener('input', validateForm);
                
                // Tag input handling
                tagInput.addEventListener('keydown', handleTagInput);
                
                // Close modal when clicking outside
                window.addEventListener('click', function(event) {
                    if (event.target === noteModal) {
                        closeModal();
                    }
                });
                
                // Set up navigation buttons
                document.querySelectorAll('.nav-button').forEach(button => {
                    button.addEventListener('click', function() {
                        document.querySelectorAll('.nav-button').forEach(btn => btn.classList.remove('active'));
                        this.classList.add('active');
                        
                        // Update UI based on selected tab
                        const tabName = this.querySelector('span').textContent;
                        updateContentForTab(tabName);
                    });
                });
                
                // Add some sample notes if empty
                if (notes.length === 0) {
                    addSampleNotes();
                }
                
                // Initial validation
                validateForm();
            }
            
            // Render notes to the UI
            function renderNotes() {
                notesContainer.innerHTML = '';
                
                if (notes.length === 0) {
                    notesContainer.innerHTML = `
                        <div class="empty-state">
                            <span class="material-symbols-rounded">note_add</span>
                            <h2>No notes yet</h2>
                            <p>Tap the + button to create your first note</p>
                        </div>
                    `;
                    return;
                }
                
                // Add notes to the container
                notes.forEach((note, index) => {
                    const isLongNote = note.content.length > 150;
                    const noteCard = document.createElement('div');
                    noteCard.className = 'note-card';
                    noteCard.innerHTML = `
                        <h3 class="title">${note.title}</h3>
                        <div class="content ${isLongNote ? 'collapsed' : 'expanded'}">
                            ${note.content}
                        </div>
                        ${isLongNote ? `
                        <div class="expand-toggle" data-index="${index}">
                            <span class="material-symbols-rounded">expand_more</span>
                            Show more
                        </div>
                        ` : ''}
                        ${note.tags && note.tags.length > 0 ? `
                        <div class="note-tags">
                            ${note.tags.map(tag => `<div class="chip">${tag}</div>`).join('')}
                        </div>
                        ` : ''}
                        <div class="date">
                            <span class="material-symbols-rounded" style="font-size: 14px;">schedule</span>
                            ${note.date}
                        </div>
                        <div class="note-actions">
                            <button class="note-action-btn" data-index="${index}" data-action="favorite">
                                <span class="material-symbols-rounded">${note.favorite ? 'favorite' : 'favorite_border'}</span>
                            </button>
                            <button class="note-action-btn" data-index="${index}" data-action="delete">
                                <span class="material-symbols-rounded">delete</span>
                            </button>
                        </div>
                    `;
                    
                    noteCard.addEventListener('click', (e) => {
                        if (!e.target.closest('.expand-toggle') && !e.target.closest('.note-action-btn')) {
                            editNote(index);
                        }
                    });
                    
                    notesContainer.appendChild(noteCard);
                });
                
                // Add event listeners to action buttons
                document.querySelectorAll('.note-action-btn').forEach(button => {
                    button.addEventListener('click', function(e) {
                        e.stopPropagation();
                        const index = parseInt(this.getAttribute('data-index'));
                        const action = this.getAttribute('data-action');
                        
                        if (action === 'favorite') {
                            toggleFavorite(index);
                        } else if (action === 'delete') {
                            deleteNote(index);
                        }
                    });
                });
                
                // Add event listeners to expand toggles
                document.querySelectorAll('.expand-toggle').forEach(toggle => {
                    toggle.addEventListener('click', function(e) {
                        e.stopPropagation();
                        const index = parseInt(this.getAttribute('data-index'));
                        const content = this.previousElementSibling;
                        
                        if (content.classList.contains('collapsed')) {
                            content.classList.remove('collapsed');
                            content.classList.add('expanded');
                            this.innerHTML = '<span class="material-symbols-rounded">expand_less</span> Show less';
                        } else {
                            content.classList.remove('expanded');
                            content.classList.add('collapsed');
                            this.innerHTML = '<span class="material-symbols-rounded">expand_more</span> Show more';
                        }
                    });
                });
            }
            
            // Open the modal for new note or editing
            function openModal(noteId = null) {
                currentNoteId = noteId;
                tags = [];
                
                if (noteId !== null) {
                    // Editing existing note
                    const note = notes[noteId];
                    modalTitle.textContent = 'Edit Note';
                    noteTitle.value = note.title;
                    noteContent.value = note.content;
                    tags = note.tags || [];
                    updateWordCount();
                    renderTags();
                } else {
                    // Creating new note
                    modalTitle.textContent = 'New Note';
                    noteTitle.value = '';
                    noteContent.value = '';
                    tags = [];
                    updateWordCount();
                    renderTags();
                }
                
                noteModal.style.display = 'flex';
                noteTitle.focus();
                validateForm();
            }
            
            // Close the modal
            function closeModal() {
                noteModal.style.display = 'none';
                noteForm.reset();
                currentNoteId = null;
                tags = [];
            }
            
            // Update word count
            function updateWordCount() {
                const text = noteContent.value;
                const words = text.trim() === '' ? 0 : text.trim().split(/\s+/).length;
                wordCount.textContent = `${words} words`;
            }
            
            // Validate form
            function validateForm() {
                const titleValid = noteTitle.value.trim() !== '';
                const contentValid = noteContent.value.trim() !== '';
                saveBtn.disabled = !(titleValid && contentValid);
            }
            
            // Handle tag input
            function handleTagInput(e) {
                if (e.key === ',' || e.key === 'Enter') {
                    e.preventDefault();
                    const tag = tagInput.value.trim();
                    if (tag && !tags.includes(tag)) {
                        tags.push(tag);
                        renderTags();
                    }
                    tagInput.value = '';
                }
            }
            
            // Render tags
            function renderTags() {
                // Remove all tags except the input
                const tagElements = tagContainer.querySelectorAll('.tag');
                tagElements.forEach(el => el.remove());
                
                // Add current tags
                tags.forEach((tag, index) => {
                    const tagEl = document.createElement('div');
                    tagEl.className = 'tag';
                    tagEl.innerHTML = `
                        ${tag}
                        <button type="button" class="tag-remove" data-index="${index}">
                            <span class="material-symbols-rounded">close</span>
                        </button>
                    `;
                    tagContainer.insertBefore(tagEl, tagInput);
                });
                
                // Add event listeners to remove buttons
                document.querySelectorAll('.tag-remove').forEach(button => {
                    button.addEventListener('click', function() {
                        const index = parseInt(this.getAttribute('data-index'));
                        tags.splice(index, 1);
                        renderTags();
                    });
                });
            }
            
            // Save a new note or update existing
            function saveNote(e) {
                e.preventDefault();
                
                const title = noteTitle.value;
                const content = noteContent.value;
                
                if (title.trim() === '' || content.trim() === '') {
                    return;
                }
                
                const newNote = {
                    title,
                    content,
                    tags: [...tags], // Copy the tags array
                    date: new Date().toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'short', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    }),
                    favorite: false
                };
                
                if (currentNoteId !== null) {
                    // Update existing note
                    notes[currentNoteId] = newNote;
                    showToast('Note updated');
                } else {
                    // Add new note
                    notes.push(newNote);
                    showToast('Note created');
                }
                
                localStorage.setItem('androidNotes', JSON.stringify(notes));
                renderNotes();
                closeModal();
            }
            
            // Delete a note
            function deleteNote(noteId) {
                if (confirm('Are you sure you want to delete this note?')) {
                    notes.splice(noteId, 1);
                    localStorage.setItem('androidNotes', JSON.stringify(notes));
                    renderNotes();
                    showToast('Note deleted');
                }
            }
            
            // Toggle favorite status
            function toggleFavorite(noteId) {
                notes[noteId].favorite = !notes[noteId].favorite;
                localStorage.setItem('androidNotes', JSON.stringify(notes));
                renderNotes();
                showToast(notes[noteId].favorite ? 'Added to favorites' : 'Removed from favorites');
            }
            
            // Edit an existing note
            function editNote(noteId) {
                openModal(noteId);
            }
            
            // Update time in status bar
            function updateTime() {
                const now = new Date();
                const timeStr = now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
                document.querySelector('.android-status-bar .time').textContent = timeStr;
                
                // Update every minute
                setTimeout(updateTime, 60000);
            }
            
            // Show material-style toast notification
            function showToast(message) {
                const toast = document.createElement('div');
                toast.className = 'toast';
                toast.innerHTML = `
                    <span class="material-symbols-rounded">check_circle</span>
                    ${message}
                `;
                
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 3000);
            }
            
            // Update content based on selected tab
            function updateContentForTab(tabName) {
                // This would filter notes based on the selected tab
                // For this demo, we'll just show a message
                if (tabName === 'Trash') {
                    notesContainer.innerHTML = `
                        <div class="empty-state">
                            <span class="material-symbols-rounded">delete</span>
                            <h2>No notes in trash</h2>
                            <p>Deleted notes will appear here</p>
                        </div>
                    `;
                } else if (tabName === 'Archive') {
                    notesContainer.innerHTML = `
                        <div class="empty-state">
                            <span class="material-symbols-rounded">archive</span>
                            <h2>No archived notes</h2>
                            <p>Archived notes will appear here</p>
                        </div>
                    `;
                } else {
                    renderNotes();
                }
            }
            
            // Add some sample notes with tags
            function addSampleNotes() {
                notes = [
                    {
                        title: 'Welcome to Material Notes',
                        content: 'This is a sample note. Try editing or deleting it, or create a new note by tapping the + button.',
                        tags: ['welcome', 'sample', 'android'],
                        date: new Date().toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        }),
                        favorite: true
                    },
                    {
                        title: 'Meeting Notes: Q3 Planning',
                        content: 'Discussed goals for Q3 including product launches, marketing initiatives, and team expansion.',
                        tags: ['work', 'meeting', 'planning'],
                        date: new Date().toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        }),
                        favorite: false
                    },
                    {
                        title: 'Shopping List',
                        content: 'Milk, Eggs, Bread, Fruits, Vegetables, Chicken, Pasta, Rice, Olive oil, Coffee',
                        tags: ['personal', 'shopping'],
                        date: new Date().toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        }),
                        favorite: true
                    }
                ];
                
                localStorage.setItem('androidNotes', JSON.stringify(notes));
                renderNotes();
            }
            
            // Initialize the app
            init();
        });
    </script>
</body>
</html>
